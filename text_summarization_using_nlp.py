# -*- coding: utf-8 -*-
"""Text Summarization Using NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VctZSO6R4dLGTrSdf0VrfKhptgEiGLDm
"""

text = """
Baʿal is well-attested in surviving inscriptions and was popular in theophoric names throughout the Levant[27] but he is usually mentioned along with other gods, "his own field of action being seldom defined".[28] Nonetheless, Ugaritic records show him as a weather god, with particular power over lightning, wind, rain, and fertility.[28][d] The dry summers of the area were explained as Baʿal's time in the underworld and his return in autumn was said to cause the storms which revived the land.[28] Thus, the worship of Baʿal in Canaan—where he eventually supplanted El as the leader of the gods and patron of kingship—was connected to the regions' dependence on rainfall for its agriculture, unlike Egypt and Mesopotamia, which focused on irrigation from their major rivers. Anxiety about the availability of water for crops and trees increased the importance of his cult, which focused attention on his role as a rain god.[17] He was also called upon during battle, showing that he was thought to intervene actively in the world of man,[28] unlike the more aloof El. The Lebanese city of Baalbeck was named after Baal. The Baʿal of Ugarit was the epithet of Hadad but as the time passed, the epithet became the god's name while Hadad became the epithet.[32] Baʿal was usually said to be the son of Dagan, but appears as one of the sons of El in Ugaritic sources.[27][18][e] Both Baʿal and El were associated with the bull in Ugaritic texts, as it symbolized both strength and fertility.[33] He held special enmity against snakes, both on their own and as representatives of Yammu (lit. "Sea"), the Canaanite sea god and river god.[34] He fought the Tannin (Tunnanu), the "Twisted Serpent" (Bṭn ʿqltn), "Lotan the Fugitive Serpent" (Ltn Bṭn Brḥ, the biblical Leviathan),[34] and the "Mighty One with Seven Heads" (Šlyṭ D.šbʿt Rašm).[35][f] Baʿal's conflict with Yammu is now generally regarded as the prototype of the vision recorded in the 7th chapter of the biblical Book of Daniel.[37] As vanquisher of the sea, Baʿal was regarded by the Canaanites and Phoenicians as the patron of sailors and sea-going merchants.[34] As vanquisher of Mot, the Canaanite death god, he was known as Baʿal Rāpiʾuma Bʿl Rpu and regarded as the leader of the Rephaim (Rpum), the ancestral spirits, particularly those of ruling dynasties.
"""

!pip install -U spacy

!python -m spacy download en_core_web_sm

!pip install contractions

import spacy
from spacy.lang.en.stop_words import STOP_WORDS
from string import punctuation
import contractions
import re

stopwords = list(STOP_WORDS)

nlp = spacy.load('en_core_web_sm')

def preprocess_text(text):
    doc = nlp(text)
    lemmatized_tokens = [token.lemma_ for token in doc]
    return ' '.join(lemmatized_tokens)

def remove_numerical_characters(text):
    return re.sub(r'\d+', '', text)

def expand_contractions(text):
    return contractions.fix(text)

def normalize_word_forms(text):
    doc = nlp(text)
    normalized_tokens = [token.lemma_.lower().strip() for token in doc if not token.is_punct]
    return ' '.join(normalized_tokens)

# Preprocess the text
text = preprocess_text(text)
text = remove_numerical_characters(text)
text = expand_contractions(text)
text = normalize_word_forms(text)

# Named Entity Recognition (NER)
doc = nlp(text)
entities = [(ent.text, ent.label_) for ent in doc.ents]
print(entities)

tokens = [token.text for token in doc]
print(tokens)

punctuation = punctuation + '\n'

word_frequencies = {}
for word in doc:
  if word.text.lower() not in stopwords:
    if word.text.lower() not in punctuation:
      if word.text not in word_frequencies.keys():
        word_frequencies[word.text] = 1
      else:
        word_frequencies[word.text] += 1

word_frequencies

max_frequency = max(word_frequencies.values())
max_frequency

for word in word_frequencies.keys():
  word_frequencies[word] = word_frequencies[word]/max_frequency

print(word_frequencies)

sentence_tokens = [sent for sent in doc.sents]
print(sentence_tokens)

sentence_scores = {}
for sent in sentence_tokens:
  for word in sent:
    if word.text.lower() in word_frequencies.keys():
      if sent not in sentence_scores.keys():
        sentence_scores[sent] = word_frequencies[word.text.lower()]
      else:
        sentence_scores[sent] += word_frequencies[word.text.lower()]

sentence_scores

from heapq import nlargest

select_length = int(len(sentence_tokens)*0.3)
select_length

summary = nlargest(select_length, sentence_scores, key = sentence_scores.get)
summary

final_summary = [word.text for word in summary]

summary = ' '.join(final_summary)
summary

len(text)

len(summary)